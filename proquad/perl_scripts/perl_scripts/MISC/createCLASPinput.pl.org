#!/usr/bin/perl -w 
use strict ;
use FileHandle ;
use Getopt::Long;
use Cwd ;
use MyUtils;
use PDB;
use ConfigPDB;
use MyGeom;
# just test

use Time::HiRes qw( usleep ualarm gettimeofday tv_interval clock_gettime clock_getres  clock);
use POSIX qw(floor);
my $commandline = util_get_cmdline("",\@ARGV) ;
my ($infile,$outfile,$which_tech,$listfile,$protein);
my (@expressions,$config);
my $howmany = 100000 ;
my $verbose = 1 ;
GetOptions(
            "which_tech=s"=>\$which_tech ,
            "protein=s"=>\$protein ,
            "infile=s"=>\$infile ,
            "listfile=s"=>\$listfile ,
            "outfile=s"=>\$outfile ,
            "expr=s"=>\@expressions,
            "config=s"=>\$config,
            "howmany=i"=>\$howmany ,
           );
die "Dont recognize command line arg @ARGV " if(@ARGV);
usage( "Need to give a output file name => option -outfile ") if(!defined $outfile);
usage( "Need to give a config file name => option -config ") if(!defined $config);
my $ofh = util_write($outfile);
usage( "Need to give a listfile -option -listfile  ") if(!defined $listfile);
usage( "Need to give a protein pdb id -option -protein  ") if(!defined $protein);
my $CNT = 0 ; 
my ($RESULTDIR,$PDBDIR,$FASTADIR,$APBSDIR,$FPOCKET,$SRC) = util_SetEnvVars();
my $PWD = cwd;

my  ($seconds, $microseconds) = gettimeofday;

my $file1 = "$PDBDIR/$protein.pdb";
my $pdb1 = new PDB();
$pdb1->ReadPDB($file1);
ConfigPDB_Init($config);

my @list= util_read_list_sentences($listfile);
my $list = {};
my @reallist ; 
#map {my @j = split ; push @reallist, @j;  } @list ;
map { s/,/ /g ; my @j = split ; push @reallist, @j;  } @list ;
map { s/\s*//g ; $list->{$_} = 1 ; } @reallist ;

my $size = @reallist ;
my @chain;
foreach my $i (@reallist){
	print "$i\n";
	$i =~ s/,//g;
	my ($name,$number) = ($i =~ /([a-zA-Z]+)([0-9]+)/);
	$name = uc($name);
	#print "$name,$number \n";
	my $len = length($name); 
	die "Wrong length $len" if($len != 1 && $len != 3);
	if($len == 1){
	      $name = $pdb1->GetThreeLetter($name);
	}
	#print "$name,$number \n";

	my ($res) = $pdb1->GetResidueIdx($number);
	my $type = ConfigPDB_GetAtom($res->GetName()) or die;
	print "$name,$number,$type \n";

	push @chain,$name;
	push @chain,$number;
}

ConfigPDB_PrintOutConf($outfile,$protein,$size,\@chain,1);

sub usage{
    my ($msg) = @_ ;
    print $msg , "\n" ; 
print << "ENDOFUSAGE" ; 
ENDOFUSAGE
    die ;
}
