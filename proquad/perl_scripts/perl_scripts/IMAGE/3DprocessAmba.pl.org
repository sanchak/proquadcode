#!/usr/bin/perl -w 
use lib '/home/b/Bio/Code/perl_scripts/perl_scripts/';
use MyGeom;
use MyMagick;
use MyUtils;
use strict ;
use FileHandle ;
use Getopt::Long;
use Cwd ;
use MyUtils;
use ConfigPDB;
use PDB;
use POSIX ;
use Algorithm::Combinatorics qw(combinations) ;
use Math::Geometry ;
use Math::Geometry::Planar;
my $polygon = Math::Geometry::Planar->new; 
   #$contour = Math::Geometry::Planar->new; creates a new contour object;


#use Time::HiRes qw( usleep ualarm gettimeofday tv_interval clock_gettime clock_getres  clock);
use POSIX qw(floor);
$, = " ";
my $commandline = util_get_cmdline("",\@ARGV) ;
my ($infile,$outfile,$which_tech,$display,$listfile,$protein);
my ($justidentify,$csv,$contourcolor,$color,$distfromperiphery,@expressions,$from,$to,@colornms,$specifiedcolor);
my $delta ;
my $verbose = 1 ;
my $NUMITERS = 100 ; 
my $SCALE = 1/7 ; 
my $DISTHRESH = 1 ; 
my $RATIO = 0.76 ;  # 0.3 / 0.395 
GetOptions(
            "from=s"=>\$from ,
            "to=s"=>\$to ,
            "csv=s"=>\$csv ,
            "protein=s"=>\$protein ,
            "contourcolor"=>\$contourcolor ,
            "display"=>\$display ,
            "infile=s"=>\$infile ,
            "specifiedcolor=s"=>\$specifiedcolor ,
            "listfile=s"=>\$listfile ,
            "color=s"=>\@colornms ,
            "outfile=s"=>\$outfile ,
            "justidentify=s"=>\$justidentify ,
            "expr=s"=>\@expressions,
            "delta=f"=>\$delta ,
            "dist=f"=>\$DISTHRESH ,
           );
die "Dont recognize command line arg @ARGV " if(@ARGV);
#usage( "Need to give a output file name => option -outfile ") if(!defined $outfile);
#my $ofh = util_write($outfile);
usage( "Need to give a input file name => option -infile ") if(!defined $infile);
usage( "Need to give a specifiedcolor ile name => option -specifiedcolor ") if(!defined $specifiedcolor );
usage( "Need to give a listfile ile name => option -listfile ") if(!defined $listfile );
usage( "Need to give a delta ile name => option -delta ") if(!defined $delta );
usage( "Need to give a color => option -color ") if(!@colornms);
my $ifh = util_read($infile);
#usage( "Need to give a from -option -from  ") if(!defined $from);
#usage( "Need to give a to -option -to  ") if(!defined $to);
$csv = "$specifiedcolor.rawdata";
my $ofhcsv = util_write($csv);


my $colornms = util_make_table(\@colornms);

my $image = new MyMagick($infile);

my $w = $image->GetWidth();
my $h = $image->GetHeight();


my $obj = $image->GetObj();

my $RlistF = $image->GetRowInfoContour(0,$colornms);
my $RlistR = $image->GetRowInfoContour(1,$colornms);
#### ALL points are actually all points on the contour
my ($minX,$minY,$maxY,$maxX,$CminX,$CminY,$CmaxY,$CmaxX,$midX,$midY,$AREACALCBYPIXEL,$insidetable,@allpoints) = GetAllPoints($image,$RlistF,$RlistR);
my @allpointstemp = @allpoints  ;
my ($maxDist,$minDist,$pointAX,$pointAY,$pointBX,$pointBY,$newmidX,$newmidY) = geom_GetABForEllipse($midX,$midY,\@allpoints);

print "W = $w H = $h maxdist = $maxDist minDist = $minDist \n";
my $ofhmax = util_write("max");
my $MM = int($maxDist);
print $ofhmax "$MM \n";



my @list= util_read_list_sentences($listfile);
my $cnt = 0; 
foreach my $i (@list){
	$cnt++ ; 
	last if($i eq $infile);
}
my $MIDCNT = $cnt ;
my $MID = $list[$cnt];

my $junkcnt = 0 ;
$cnt = 0 ; 

my @threeDpoints ; 
foreach my $i (@list){

	my $dist = abs($MIDCNT - $cnt);
	my $XX = $dist * $delta ;
    my $image = new MyMagick($i);

    my $w = $image->GetWidth();
    my $h = $image->GetHeight();

    my (@speccolor) = $image->FindCoordsForColor($specifiedcolor);


	### Just see if red is gettting identified
	if(defined $justidentify){
           my (@l) = $image->FindCoordsForColor($justidentify);
		   while(@l){
		       my $x = shift @l;
		       my $y = shift @l;
               $image->SetColorToPixelByColorName($x,$y,"white");
		   }
	       $image->Write("$i.identify$justidentify.png",$display);
		   next ;
	}

	my $nspeccolor = @speccolor ;
    print "W = $w H = $h dist=$dist i=$i midcnt=$MIDCNT speccolor=$nspeccolor \n";
	while(@speccolor){
		my $x = shift @speccolor ;
		my $y = shift @speccolor ;
		my $str = geom_MakeKeyFromCoord($x,$y);
		next if(! exists $insidetable->{$str});

		my $threeDstr = geom_MakeKeyFromCoord($x,$y,$cnt);
		push @threeDpoints, $threeDstr ; 


	    my $D = geom_Distance_2D($midX,$midY,$x,$y);
		$D = $D * $SCALE ;
		my $ZZ = sqrt($XX*$XX + $D*$D);
	}

	#$slice2points->{$cnt} = \@threeDpoints ;
	$cnt++ ;
}

my $threeDCount = @threeDpoints ;
print "threeDpoints = $threeDCount\n";

my $grpcnt = 0 ; 
my $grps ={};
my $grpsmerge ={};

foreach my $p (@threeDpoints){
	my $found = 0 ; 
	my ($x,$y,$z) = geom_MakeCoordFromKey($p);
	print "Checking new point $x $y $z\n";
	foreach my $k (sort {$a <=> $b} keys %{$grps}){
		my @grppoints = @{$grps->{$k}}; 

		foreach my $P (@grppoints){
	       my ($X,$Y,$Z) = geom_MakeCoordFromKey($P);

		   $z = $RATIO * $z ; 
		   $Z = $RATIO * $Z ; 
		   my $d = geom_Distance_3D($x,$y,$z,$X,$Y,$Z);

	       print "HH = $d\n";
		   if($d < $DISTHRESH){
				## merge 
				print "\tfound grp $k \n";
				push @{$grps->{$k}}, $p ; 
		   		if($found){
					$grpsmerge->{$found} = [] if(! exists $grpsmerge->{$found});
					push @{$grpsmerge->{$found}} , $k ; 
				}
				else{
		   		    $found = $k ;
				}
				last ; 
		   }
		}
	}

	## create new grp 
	if(!$found){
		$grpcnt++;
		$grps->{$grpcnt} = [];
		print "Creating new grp $grpcnt \n";
		push @{$grps->{$grpcnt}}, $p ; 
	}
}

## merge 
foreach my $k (sort {$a <=> $b} keys %{$grpsmerge}){
	my @l = @{$grpsmerge->{$k}};
	foreach my $K (@l){
		print "Merging $k and $K\n";
	    my @grppoints = @{$grps->{$K}}; 
		foreach my $p (@grppoints){
			push @{$grps->{$k}}, $p ; 
		}
		delete $grps->{$K} ; 
	}
}

my @groups = (sort {$a <=> $b} keys %{$grps});


my $finalgroups = {};
while(@groups){
   my $k = shift @groups ; 
   my @grppoints = @{$grps->{$k}}; 
   while(@grppoints){
   	    my $p = shift @grppoints; 
	    my ($x,$y,$z) = geom_MakeCoordFromKey($p);
	    foreach my $K (@groups){
	        my @GRPPOINTS = @{$grps->{$K}}; 
		    my $minD = 1000 ; 
			foreach my $P (@GRPPOINTS){
	            my ($X,$Y,$Z) = geom_MakeCoordFromKey($P);

		        $z = $RATIO * $z ; 
		        $Z = $RATIO * $Z ; 
		        my $d = geom_Distance_3D($x,$y,$z,$X,$Y,$Z);
				$minD = $d if($d < $minD); 
			}
		    print "mind for $k and $K is $minD \n";
			if($minD < $DISTHRESH){
				print "MERGE KKK $k and $K \n";
			}
			else{
				$finalgroups->{$K} = 1 ;
			}
		}
	}
}
exit ; 


sub usage{
    my ($msg) = @_ ;
    print $msg , "\n" ;
print << "ENDOFUSAGE" ; 
ENDOFUSAGE
    die ;
}

sub GetAllPoints{
	my ($IMAGE,$listF,$listR) = @_ ; 
	my $AREACALCBYPIXEL = 0 ;
    my $n = @{$listF} -1 ; 
	################################################################
	########## This gets the bounding coordinates ###################
	################################################################
    my ($minX,$minY,$maxY,$maxX) ;
    my ($CminX,$CminY,$CmaxY,$CmaxX) ;
	$CmaxX = 0 ;
	$CminX = 1000000 ;
	my ($prevStartX,$prevEndX) ; 
	my (@allpoints);
	
	my $Insidetable = {};
    foreach my $i (0..$n){
	    next if($listR->[$i]  == -1 || $listF->[$i]  == -1);
    
        my $start = $listF->[$i] ;
        my $end = $listR->[$i] ;
        my $y = $i+1 ;
		if(!defined $prevStartX){
                foreach my $XXX ($start..$end){
					push @allpoints, $XXX ;
					push @allpoints, $y ;
				}
		}
		if($start < $CminX){
			$CminX = $start ; 
			$CminY = $y;
		}
		if($end > $CmaxX){
			$CmaxX = $end ; 
			$CmaxY = $y;
		}

	    $minY = $y if(!defined $minY);
	    $maxY = $y ;
    
	    $minX = $start if(!defined $minX);
	    $maxX = $start ;
    
		my $x = $start ;
		push @allpoints, $x ;
		push @allpoints, $y ;

		$x = $end ;
		push @allpoints, $x ;
		push @allpoints, $y ;


		############################################
		#### this makes the line continuous #########
		############################################
		if(defined $prevStartX){
				my $A =$prevStartX > $start ?  $start : $prevStartX ;
				my $B =$prevStartX > $start ? $prevStartX :$start  ;
                foreach my $XXX ($A..$B){
					push @allpoints, $XXX ;
					push @allpoints, $y ;
				}
				$A =$prevEndX > $end ?  $end : $prevEndX ;
				$B =$prevEndX > $end ? $prevEndX :$end  ;
                foreach my $XXX ($A..$B){
					push @allpoints, $XXX ;
					push @allpoints, $y ;
				}
		}
		$prevStartX = $start;
		$prevEndX = $end;
		

        foreach my $x ($start..$end){
           $AREACALCBYPIXEL++;
	       my $str = geom_MakeKeyFromCoord($x,$y);
	       $Insidetable->{$str} = 1 ;
           #$image->SetColorToPixelByColorName($x,$y,"green");
	    }
    }
	
    
   ## there might be a gap in the last line - fill it up
	my @allpointstemp = @allpoints  ;
	my $MMMinx = 100000;
	my $MMMaxx = 0  ;
	while(@allpointstemp){
			my $x = shift @allpointstemp ;
			my $y = shift @allpointstemp ;
			if($y eq $maxY){
				if($x < $MMMinx){
					$MMMinx = $x ; 
				}
				if($x > $MMMaxx){
					$MMMaxx = $x ; 
				}
			}
	}
	$MMMaxx = $MMMaxx - 1;
	$MMMinx = $MMMinx + 1;
    foreach my $x ($MMMinx..$MMMaxx){
		push @allpoints, $x ;
		push @allpoints, $maxY ;
	}

	my @allpointstemp = @allpoints  ;
	while(@allpointstemp){
			my $x = shift @allpointstemp ;
			my $y = shift @allpointstemp ;
            #$image->SetColorToPixelByColorName($x,$y,"green");
	}
	#$image->Write("tttt.png",$display);
	#die ;

	#####################################################
	## There are two midpoints - which one to choose? 
	##################################################
    my $midX = ($minX + $maxX)/2 ;
    my $midY = ($minY + $maxY)/2 ;
    #my $midX = (($minX + $maxX)/2 + ($CminX + $CmaxX)/2)/2 ;
    #my $midY = (($minY + $maxY)/2 + ($CminY + $CmaxY)/2)/2 ;
    print "midx =  $midX = ($minX + $maxX)/2 ; \n";
    print "midy  $midY = ($minY + $maxY)/2 ; \n";


    #$image->SetColorToPixelByColorName($minX,$minY,"red");
    #$image->SetColorToPixelByColorName($maxX,$maxY,"red");


    #$image->SetColorToPixelByColorName($CminX,$CminY,"red");
    #$image->SetColorToPixelByColorName($CmaxX,$CmaxY,"red");


	return ($minX,$minY,$maxY,$maxX,$CminX,$CminY,$CmaxY,$CmaxX,$midX,$midY,$AREACALCBYPIXEL,$Insidetable,@allpoints);
}

